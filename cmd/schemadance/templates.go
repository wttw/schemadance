package main

import (
	"bytes"
	"embed"
	"github.com/Masterminds/sprig"
	"go/format"
	"io/fs"
	"log"
	"os"
	"sort"
	"strings"
	"text/template"
)

//go:embed template/*
var templateFiles embed.FS

var templates *template.Template

func Templates() (*template.Template, error) {
	if templates == nil {
		sub, err := fs.Sub(templateFiles, "template")
		if err != nil {
			return nil, err
		}
		tpls, err := template.New("base").Funcs(sprig.HermeticTxtFuncMap()).ParseFS(sub, "*.tpl")
		if err != nil {
			return nil, err
		}
		templates = tpls
	}
	return templates, nil
}

func DbTypes() []string {
	types, err := dbTypes()
	if err != nil {
		log.Fatalf("Failed to list supported database types: %v", err)
	}
	return types
}

func dbTypes() ([]string, error) {
	sub, err := fs.Sub(templateFiles, "template")
	if err != nil {
		return nil, err
	}
	files, err := fs.Glob(sub, "db_*.tpl")
	if err != nil {
		return nil, err
	}
	types := make([]string, len(files))
	for i, v := range files {
		types[i] = strings.TrimPrefix(strings.TrimSuffix(v, ".tpl"), "db_")
	}
	sort.Strings(types)
	return types, nil
}

func ValidDbType(name string) bool {
	return fs.ValidPath("template/db_" + name + ".tpl")
}

func RenderGoTemplate(name string, filename string, data interface{}) error {
	var generated bytes.Buffer
	tpl, err := Templates()
	if err != nil {
		return err
	}
	err = tpl.ExecuteTemplate(&generated, name, data)
	if err != nil {
		return err
	}
	formatted, err := format.Source(generated.Bytes())
	if err != nil {
		_ = os.WriteFile(filename, generated.Bytes(), 0644)
		return err
	}
	return os.WriteFile(filename, formatted, 0644)
}